name: Lisp CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  mac-build:
    if: contains(github.event.head_commit.message, 'COMPILEMAC') || contains(github.event.head_commit.message, 'COMPILEALL')
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SBCL
        run: brew install sbcl

      - name: Setup Quicklisp
        run: |
          curl -O https://beta.quicklisp.org/quicklisp.lisp &&
          sbcl --non-interactive --load quicklisp.lisp \
            --eval '(quicklisp-quickstart:install)'

      - name: Cache Quicklisp packages
        uses: actions/cache@v4
        with:
          path: ~/quicklisp/
          key: ${{ runner.os }}-quicklisp-${{ hashFiles('**/*.asd', '**/*.lisp') }}
          restore-keys: |
            ${{ runner.os }}-quicklisp-

      - name: Move Lisp files to Quicklisp local-projects directory
        run: |
          mkdir -p ~/quicklisp/local-projects/
          cp src/features.asd src/features.lisp ~/quicklisp/local-projects/

      - name: Register local projects with Quicklisp
        run: |
          sbcl --non-interactive \
            --load ~/quicklisp/setup.lisp \
            --eval '(ql:register-local-projects)' \
            --eval '(quit)'

      - name: Clean binaries directory
        run: rm -rf binaries && mkdir -p binaries

      - name: Build and save the executables
        run: |
          sbcl --noinform --dynamic-space-size 4096 --control-stack-size 20 \
            --load ~/quicklisp/setup.lisp \
            --load src/genppi.lisp \
            --eval '(save-lisp-and-die "binaries/genppi4g-Mac.x" :executable t :save-runtime-options t :toplevel '"'"'main)'
          sbcl --noinform --dynamic-space-size 8192 --control-stack-size 20 \
            --load ~/quicklisp/setup.lisp \
            --load src/genppi.lisp \
            --eval '(save-lisp-and-die "binaries/genppi8g-Mac.x" :executable t :save-runtime-options t :toplevel '"'"'main)'
          sbcl --noinform --dynamic-space-size 16384 --control-stack-size 20 \
            --load ~/quicklisp/setup.lisp \
            --load src/genppi.lisp \
            --eval '(save-lisp-and-die "binaries/genppi16g-Mac.x" :executable t :save-runtime-options t :toplevel '"'"'main)'
          sbcl --noinform --dynamic-space-size 32768 --control-stack-size 20 \
            --load ~/quicklisp/setup.lisp \
            --load src/genppi.lisp \
            --eval '(save-lisp-and-die "binaries/genppi32g-Mac.x" :executable t :save-runtime-options t :toplevel '"'"'main)'
          sbcl --noinform --dynamic-space-size 4096 --control-stack-size 20 \
            --load ~/quicklisp/setup.lisp \
            --load src/genppidb.lisp \
            --eval '(save-lisp-and-die "binaries/genppidb4g-Mac.x" :executable t :save-runtime-options t :toplevel '"'"'main)'
          sbcl --noinform --dynamic-space-size 8192 --control-stack-size 20 \
            --load ~/quicklisp/setup.lisp \
            --load src/genppidb.lisp \
            --eval '(save-lisp-and-die "binaries/genppidb8g-Mac.x" :executable t :save-runtime-options t :toplevel '"'"'main)'
          sbcl --noinform --dynamic-space-size 16384 --control-stack-size 20 \
            --load ~/quicklisp/setup.lisp \
            --load src/genppidb.lisp \
            --eval '(save-lisp-and-die "binaries/genppidb16g-Mac.x" :executable t :save-runtime-options t :toplevel '"'"'main)'
          sbcl --noinform --dynamic-space-size 32768 --control-stack-size 20 \
            --load ~/quicklisp/setup.lisp \
            --load src/genppidb.lisp \
            --eval '(save-lisp-and-die "binaries/genppidb32g-Mac.x" :executable t :save-runtime-options t :toplevel '"'"'main)'

      - name: Archive macOS binaries
        run: |
          cd binaries
          zip ../genppi-mac-binaries.zip *

      - name: Upload macOS binaries as artifact
        uses: actions/upload-artifact@v4
        with:
          name: genppi-mac-binaries
          path: genppi-mac-binaries.zip

  linux-build:
    if: contains(github.event.head_commit.message, 'COMPILELINUX') || contains(github.event.head_commit.message, 'COMPILEALL')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SBCL
        run: sudo apt-get update && sudo apt-get install -y sbcl curl zip

      - name: Setup Quicklisp
        run: |
          curl -O https://beta.quicklisp.org/quicklisp.lisp
          sbcl --non-interactive --load quicklisp.lisp \
            --eval '(quicklisp-quickstart:install)'

      - name: Cache Quicklisp packages
        uses: actions/cache@v4
        with:
          path: ~/quicklisp/
          key: ${{ runner.os }}-quicklisp-${{ hashFiles('**/*.asd', '**/*.lisp') }}
          restore-keys: |
            ${{ runner.os }}-quicklisp-

      - name: Move Lisp files to Quicklisp local-projects directory
        run: |
          mkdir -p ~/quicklisp/local-projects/
          cp src/features.asd src/features.lisp ~/quicklisp/local-projects/

      - name: Register local projects with Quicklisp
        run: |
          sbcl --non-interactive \
            --load ~/quicklisp/setup.lisp \
            --eval '(ql:register-local-projects)' \
            --eval '(quit)'

      - name: Clean binaries directory
        run: rm -rf binaries && mkdir -p binaries

      - name: Build and save the executables
        run: |
          sbcl --noinform --dynamic-space-size 4096 --control-stack-size 20 \
            --load ~/quicklisp/setup.lisp \
            --load src/genppi.lisp \
            --eval '(save-lisp-and-die "binaries/genppi4g-Linux.x" :executable t :save-runtime-options t :toplevel '"'"'main)'
          sbcl --noinform --dynamic-space-size 8192 --control-stack-size 20 \
            --load ~/quicklisp/setup.lisp \
            --load src/genppi.lisp \
            --eval '(save-lisp-and-die "binaries/genppi8g-Linux.x" :executable t :save-runtime-options t :toplevel '"'"'main)'
          sbcl --noinform --dynamic-space-size 16384 --control-stack-size 20 \
            --load ~/quicklisp/setup.lisp \
            --load src/genppi.lisp \
            --eval '(save-lisp-and-die "binaries/genppi16g-Linux.x" :executable t :save-runtime-options t :toplevel '"'"'main)'
          sbcl --noinform --dynamic-space-size 32768 --control-stack-size 20 \
            --load ~/quicklisp/setup.lisp \
            --load src/genppi.lisp \
            --eval '(save-lisp-and-die "binaries/genppi32g-Linux.x" :executable t :save-runtime-options t :toplevel '"'"'main)'
          sbcl --noinform --dynamic-space-size 4096 --control-stack-size 20 \
            --load ~/quicklisp/setup.lisp \
            --load src/genppidb.lisp \
            --eval '(save-lisp-and-die "binaries/genppidb4g-Linux.x" :executable t :save-runtime-options t :toplevel '"'"'main)'
          sbcl --noinform --dynamic-space-size 8192 --control-stack-size 20 \
            --load ~/quicklisp/setup.lisp \
            --load src/genppidb.lisp \
            --eval '(save-lisp-and-die "binaries/genppidb8g-Linux.x" :executable t :save-runtime-options t :toplevel '"'"'main)'
          sbcl --noinform --dynamic-space-size 16384 --control-stack-size 20 \
            --load ~/quicklisp/setup.lisp \
            --load src/genppidb.lisp \
            --eval '(save-lisp-and-die "binaries/genppidb16g-Linux.x" :executable t :save-runtime-options t :toplevel '"'"'main)'
          sbcl --noinform --dynamic-space-size 32768 --control-stack-size 20 \
            --load ~/quicklisp/setup.lisp \
            --load src/genppidb.lisp \
            --eval '(save-lisp-and-die "binaries/genppidb32g-Linux.x" :executable t :save-runtime-options t :toplevel '"'"'main)'

      - name: Archive Linux binaries
        run: |
          cd binaries
          zip ../genppi-linux-binaries.zip *

      - name: Upload Linux binaries as artifact
        uses: actions/upload-artifact@v4
        with:
          name: genppi-linux-binaries
          path: genppi-linux-binaries.zip

  windows-build:
    if: contains(github.event.head_commit.message, 'COMPILEWIN') || contains(github.event.head_commit.message, 'COMPILEALL')
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SBCL
        run: choco install sbcl
      
      # O Choco nem sempre adiciona o SBCL ao PATH da sessão atual do GitHub Actions.
      # Esta etapa garante que o SBCL seja encontrado nos passos seguintes.
      # A versão pode precisar ser atualizada no futuro.
      - name: Add SBCL to PATH
        run: echo "C:\Program Files\Steel Bank Common Lisp\2.4.4" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Setup Quicklisp
        shell: powershell
        run: |
          Invoke-WebRequest -Uri https://beta.quicklisp.org/quicklisp.lisp -OutFile quicklisp.lisp
          
          # Estratégia Robusta: Gerar um script Lisp para a instalação.
          # Isso evita TODOS os problemas de quoting com caminhos do Windows.
          # SBCL no Windows entende barras normais '/', o que simplifica tudo.
          $ql_path_for_lisp = ($env:USERPROFILE + "/quicklisp/").Replace('\', '/')
          $install_script = "(quicklisp-quickstart:install :path ""$ql_path_for_lisp"")"
          
          # Adiciona o setup do quicklisp ao arquivo de inicialização do SBCL
          $install_script += "`n(ql:add-to-init-file)"

          # Salva o script
          Set-Content -Path "install-ql.lisp" -Value $install_script
          
          # Executa a instalação carregando o script, sem --eval
          sbcl --non-interactive --load quicklisp.lisp --load install-ql.lisp --eval "(quit)"

      - name: Cache Quicklisp packages
        uses: actions/cache@v4
        with:
          path: ${{ env.USERPROFILE }}\quicklisp\
          key: ${{ runner.os }}-quicklisp-${{ hashFiles('**/*.asd', '**/*.lisp') }}
          restore-keys: |
            ${{ runner.os }}-quicklisp-

      - name: Move Lisp files to Quicklisp local-projects directory
        shell: powershell
        run: |
          $localProjectsPath = Join-Path $env:USERPROFILE "quicklisp\local-projects"
          New-Item -ItemType Directory -Force -Path $localProjectsPath
          Copy-Item src\features.asd,src\features.lisp -Destination $localProjectsPath

      - name: Register local projects with Quicklisp
        shell: powershell
        run: |
          # Para um comando simples como este, --eval é seguro.
          sbcl --non-interactive --load (Join-Path $env:USERPROFILE "quicklisp\setup.lisp") --eval "(ql:register-local-projects)" --eval "(quit)"

      - name: Clean binaries directory
        shell: powershell
        run: |
          if (Test-Path binaries) { Remove-Item -Recurse -Force binaries }
          New-Item -ItemType Directory -Force -Path binaries

      - name: Build executables using a build script
        shell: powershell
        run: |
          # Gera um único script Lisp (build.lisp) que contém a lógica para construir TUDO.
          # O script Lisp irá chamar o SBCL externamente para cada executável,
          # pois save-lisp-and-die encerra o processo.
          
          $ql_setup_path = (Join-Path $env:USERPROFILE "quicklisp\setup.lisp").Replace('\', '/')

          @"
          ;; build.lisp - Gerado automaticamente pelo workflow do GitHub Actions

          (defun build (source-file output-file dynamic-space)
            (format t "~&Compilando ~a...~%" output-file)
            (let ((command (format nil "sbcl --noinform --dynamic-space-size ~a --control-stack-size 20 --load \"~a\" --load \"~a\" --eval \"(save-lisp-and-die \\\"~a\\\" :executable t :toplevel #'main)\""
                                     dynamic-space
                                     "~a"      ; ql_setup_path
                                     source-file
                                     output-file)))
              (format t "Executando: ~a~%" command)
              (let ((status (sb-ext:run-program "/bin/sh" (list "-c" command) :output *standard-output* :error :output)))
                (unless (zerop (sb-ext:process-exit-code status))
                  (error "Falha ao compilar ~a." output-file)))))

          ;; Lista de executáveis para construir
          ;; Formato: (caminho-do-fonte caminho-do-executável tamanho-da-memória)
          (let ((build-list '(("src/genppi.lisp"   "binaries/genppi4g-Win.exe"   4096)
                              ("src/genppi.lisp"   "binaries/genppi8g-Win.exe"   8192)
                              ("src/genppi.lisp"   "binaries/genppi16g-Win.exe"  16384)
                              ("src/genppi.lisp"   "binaries/genppi32g-Win.exe"  32768)
                              ("src/genppidb.lisp" "binaries/genppidb4g-Win.exe" 4096)
                              ("src/genppidb.lisp" "binaries/genppidb8g-Win.exe" 8192)
                              ("src/genppidb.lisp" "binaries/genppidb16g-Win.exe" 16384)
                              ("src/genppidb.lisp" "binaries/genppidb32g-Win.exe" 32768))))
            (dolist (item build-list)
              (apply #'build item)))

          (quit)
          "@ -f $ql_setup_path | Set-Content -Path "build.lisp" -Encoding utf8

          # Executa o script de build principal
          # Este script irá orquestrar a compilação de todos os outros.
          sbcl --load "build.lisp"

      - name: Archive Windows binaries
        shell: powershell
        run: Compress-Archive -Path binaries\* -DestinationPath genppi-win-binaries.zip

      - name: Upload Windows binaries as artifact
        uses: actions/upload-artifact@v4
        with:
          name: genppi-win-binaries
          path: genppi-win-binaries.zip

  gather-artifacts:
    needs: [mac-build, windows-build, linux-build]
    if: |
      always() &&
      (
        contains(github.event.head_commit.message, 'COMPILEALL') ||
        contains(github.event.head_commit.message, 'COMPILEMAC') ||
        contains(github.event.head_commit.message, 'COMPILEWIN') ||
        contains(github.event.head_commit.message, 'COMPILELINUX')
      )
    runs-on: ubuntu-latest
    steps:
      - name: Download all platform artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-genppi-binaries

      - name: Unpack all platform zips into folders
        run: |
          mkdir -p all-unzipped/mac all-unzipped/win all-unzipped/linux
          unzip -q all-genppi-binaries/genppi-mac-binaries.zip -d all-unzipped/mac
          unzip -q all-genppi-binaries/genppi-win-binaries.zip -d all-unzipped/win
          unzip -q all-genppi-binaries/genppi-linux-binaries.zip -d all-unzipped/linux

      - name: Create single zip with all executables
        run: |
          cd all-unzipped
          zip -r ../all-genppi-binaries.zip *

      - name: Upload single zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: all-genppi-binaries
          path: all-genppi-binaries.zip
